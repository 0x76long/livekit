// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rtc/interfaces.go

// Package rtc is a generated GoMock package.
package rtc

import (
	gomock "github.com/golang/mock/gomock"
	livekit "github.com/livekit/livekit-server/proto/livekit"
	rtcp "github.com/pion/rtcp"
	webrtc "github.com/pion/webrtc/v3"
	reflect "reflect"
	time "time"
)

// MockWebsocketClient is a mock of WebsocketClient interface
type MockWebsocketClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketClientMockRecorder
}

// MockWebsocketClientMockRecorder is the mock recorder for MockWebsocketClient
type MockWebsocketClientMockRecorder struct {
	mock *MockWebsocketClient
}

// NewMockWebsocketClient creates a new mock instance
func NewMockWebsocketClient(ctrl *gomock.Controller) *MockWebsocketClient {
	mock := &MockWebsocketClient{ctrl: ctrl}
	mock.recorder = &MockWebsocketClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebsocketClient) EXPECT() *MockWebsocketClientMockRecorder {
	return m.recorder
}

// ReadMessage mocks base method
func (m *MockWebsocketClient) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage
func (mr *MockWebsocketClientMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebsocketClient)(nil).ReadMessage))
}

// WriteMessage mocks base method
func (m *MockWebsocketClient) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *MockWebsocketClientMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebsocketClient)(nil).WriteMessage), messageType, data)
}

// WriteControl mocks base method
func (m *MockWebsocketClient) WriteControl(messageType int, data []byte, deadline time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteControl", messageType, data, deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteControl indicates an expected call of WriteControl
func (mr *MockWebsocketClientMockRecorder) WriteControl(messageType, data, deadline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteControl", reflect.TypeOf((*MockWebsocketClient)(nil).WriteControl), messageType, data, deadline)
}

// MockSignalConnection is a mock of SignalConnection interface
type MockSignalConnection struct {
	ctrl     *gomock.Controller
	recorder *MockSignalConnectionMockRecorder
}

// MockSignalConnectionMockRecorder is the mock recorder for MockSignalConnection
type MockSignalConnectionMockRecorder struct {
	mock *MockSignalConnection
}

// NewMockSignalConnection creates a new mock instance
func NewMockSignalConnection(ctrl *gomock.Controller) *MockSignalConnection {
	mock := &MockSignalConnection{ctrl: ctrl}
	mock.recorder = &MockSignalConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSignalConnection) EXPECT() *MockSignalConnectionMockRecorder {
	return m.recorder
}

// ReadRequest mocks base method
func (m *MockSignalConnection) ReadRequest() (*livekit.SignalRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRequest")
	ret0, _ := ret[0].(*livekit.SignalRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRequest indicates an expected call of ReadRequest
func (mr *MockSignalConnectionMockRecorder) ReadRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRequest", reflect.TypeOf((*MockSignalConnection)(nil).ReadRequest))
}

// WriteResponse mocks base method
func (m *MockSignalConnection) WriteResponse(arg0 *livekit.SignalResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteResponse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteResponse indicates an expected call of WriteResponse
func (mr *MockSignalConnectionMockRecorder) WriteResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteResponse", reflect.TypeOf((*MockSignalConnection)(nil).WriteResponse), arg0)
}

// MockPeerConnection is a mock of PeerConnection interface
type MockPeerConnection struct {
	ctrl     *gomock.Controller
	recorder *MockPeerConnectionMockRecorder
}

// MockPeerConnectionMockRecorder is the mock recorder for MockPeerConnection
type MockPeerConnectionMockRecorder struct {
	mock *MockPeerConnection
}

// NewMockPeerConnection creates a new mock instance
func NewMockPeerConnection(ctrl *gomock.Controller) *MockPeerConnection {
	mock := &MockPeerConnection{ctrl: ctrl}
	mock.recorder = &MockPeerConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPeerConnection) EXPECT() *MockPeerConnectionMockRecorder {
	return m.recorder
}

// OnICECandidate mocks base method
func (m *MockPeerConnection) OnICECandidate(f func(*webrtc.ICECandidate)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnICECandidate", f)
}

// OnICECandidate indicates an expected call of OnICECandidate
func (mr *MockPeerConnectionMockRecorder) OnICECandidate(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnICECandidate", reflect.TypeOf((*MockPeerConnection)(nil).OnICECandidate), f)
}

// OnICEConnectionStateChange mocks base method
func (m *MockPeerConnection) OnICEConnectionStateChange(arg0 func(webrtc.ICEConnectionState)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnICEConnectionStateChange", arg0)
}

// OnICEConnectionStateChange indicates an expected call of OnICEConnectionStateChange
func (mr *MockPeerConnectionMockRecorder) OnICEConnectionStateChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnICEConnectionStateChange", reflect.TypeOf((*MockPeerConnection)(nil).OnICEConnectionStateChange), arg0)
}

// OnTrack mocks base method
func (m *MockPeerConnection) OnTrack(f func(*webrtc.TrackRemote, *webrtc.RTPReceiver)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnTrack", f)
}

// OnTrack indicates an expected call of OnTrack
func (mr *MockPeerConnectionMockRecorder) OnTrack(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTrack", reflect.TypeOf((*MockPeerConnection)(nil).OnTrack), f)
}

// OnDataChannel mocks base method
func (m *MockPeerConnection) OnDataChannel(arg0 func(*webrtc.DataChannel)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDataChannel", arg0)
}

// OnDataChannel indicates an expected call of OnDataChannel
func (mr *MockPeerConnectionMockRecorder) OnDataChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDataChannel", reflect.TypeOf((*MockPeerConnection)(nil).OnDataChannel), arg0)
}

// OnNegotiationNeeded mocks base method
func (m *MockPeerConnection) OnNegotiationNeeded(f func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNegotiationNeeded", f)
}

// OnNegotiationNeeded indicates an expected call of OnNegotiationNeeded
func (mr *MockPeerConnectionMockRecorder) OnNegotiationNeeded(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNegotiationNeeded", reflect.TypeOf((*MockPeerConnection)(nil).OnNegotiationNeeded), f)
}

// Close mocks base method
func (m *MockPeerConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPeerConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPeerConnection)(nil).Close))
}

// SetRemoteDescription mocks base method
func (m *MockPeerConnection) SetRemoteDescription(desc webrtc.SessionDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRemoteDescription", desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRemoteDescription indicates an expected call of SetRemoteDescription
func (mr *MockPeerConnectionMockRecorder) SetRemoteDescription(desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemoteDescription", reflect.TypeOf((*MockPeerConnection)(nil).SetRemoteDescription), desc)
}

// SetLocalDescription mocks base method
func (m *MockPeerConnection) SetLocalDescription(desc webrtc.SessionDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLocalDescription", desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLocalDescription indicates an expected call of SetLocalDescription
func (mr *MockPeerConnectionMockRecorder) SetLocalDescription(desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLocalDescription", reflect.TypeOf((*MockPeerConnection)(nil).SetLocalDescription), desc)
}

// CreateOffer mocks base method
func (m *MockPeerConnection) CreateOffer(options *webrtc.OfferOptions) (webrtc.SessionDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffer", options)
	ret0, _ := ret[0].(webrtc.SessionDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffer indicates an expected call of CreateOffer
func (mr *MockPeerConnectionMockRecorder) CreateOffer(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffer", reflect.TypeOf((*MockPeerConnection)(nil).CreateOffer), options)
}

// CreateAnswer mocks base method
func (m *MockPeerConnection) CreateAnswer(options *webrtc.AnswerOptions) (webrtc.SessionDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswer", options)
	ret0, _ := ret[0].(webrtc.SessionDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnswer indicates an expected call of CreateAnswer
func (mr *MockPeerConnectionMockRecorder) CreateAnswer(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswer", reflect.TypeOf((*MockPeerConnection)(nil).CreateAnswer), options)
}

// AddICECandidate mocks base method
func (m *MockPeerConnection) AddICECandidate(candidate webrtc.ICECandidateInit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddICECandidate", candidate)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddICECandidate indicates an expected call of AddICECandidate
func (mr *MockPeerConnectionMockRecorder) AddICECandidate(candidate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddICECandidate", reflect.TypeOf((*MockPeerConnection)(nil).AddICECandidate), candidate)
}

// WriteRTCP mocks base method
func (m *MockPeerConnection) WriteRTCP(pkts []rtcp.Packet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRTCP", pkts)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRTCP indicates an expected call of WriteRTCP
func (mr *MockPeerConnectionMockRecorder) WriteRTCP(pkts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRTCP", reflect.TypeOf((*MockPeerConnection)(nil).WriteRTCP), pkts)
}

// CreateDataChannel mocks base method
func (m *MockPeerConnection) CreateDataChannel(label string, options *webrtc.DataChannelInit) (*webrtc.DataChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataChannel", label, options)
	ret0, _ := ret[0].(*webrtc.DataChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataChannel indicates an expected call of CreateDataChannel
func (mr *MockPeerConnectionMockRecorder) CreateDataChannel(label, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataChannel", reflect.TypeOf((*MockPeerConnection)(nil).CreateDataChannel), label, options)
}

// AddTransceiverFromTrack mocks base method
func (m *MockPeerConnection) AddTransceiverFromTrack(track webrtc.TrackLocal, init ...webrtc.RtpTransceiverInit) (*webrtc.RTPTransceiver, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{track}
	for _, a := range init {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTransceiverFromTrack", varargs...)
	ret0, _ := ret[0].(*webrtc.RTPTransceiver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransceiverFromTrack indicates an expected call of AddTransceiverFromTrack
func (mr *MockPeerConnectionMockRecorder) AddTransceiverFromTrack(track interface{}, init ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{track}, init...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransceiverFromTrack", reflect.TypeOf((*MockPeerConnection)(nil).AddTransceiverFromTrack), varargs...)
}

// ConnectionState mocks base method
func (m *MockPeerConnection) ConnectionState() webrtc.PeerConnectionState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionState")
	ret0, _ := ret[0].(webrtc.PeerConnectionState)
	return ret0
}

// ConnectionState indicates an expected call of ConnectionState
func (mr *MockPeerConnectionMockRecorder) ConnectionState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionState", reflect.TypeOf((*MockPeerConnection)(nil).ConnectionState))
}

// RemoveTrack mocks base method
func (m *MockPeerConnection) RemoveTrack(sender *webrtc.RTPSender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrack", sender)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrack indicates an expected call of RemoveTrack
func (mr *MockPeerConnectionMockRecorder) RemoveTrack(sender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrack", reflect.TypeOf((*MockPeerConnection)(nil).RemoveTrack), sender)
}
