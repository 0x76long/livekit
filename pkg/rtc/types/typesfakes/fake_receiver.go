// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/livekit/livekit-server/pkg/rtc/types"
	"github.com/pion/ion-sfu/pkg/buffer"
	"github.com/pion/rtp"
)

type FakeReceiver struct {
	GetBufferedPacketStub        func([]byte, uint16, uint16) (rtp.Packet, error)
	getBufferedPacketMutex       sync.RWMutex
	getBufferedPacketArgsForCall []struct {
		arg1 []byte
		arg2 uint16
		arg3 uint16
	}
	getBufferedPacketReturns struct {
		result1 rtp.Packet
		result2 error
	}
	getBufferedPacketReturnsOnCall map[int]struct {
		result1 rtp.Packet
		result2 error
	}
	RTPChanStub        func() <-chan buffer.ExtPacket
	rTPChanMutex       sync.RWMutex
	rTPChanArgsForCall []struct {
	}
	rTPChanReturns struct {
		result1 <-chan buffer.ExtPacket
	}
	rTPChanReturnsOnCall map[int]struct {
		result1 <-chan buffer.ExtPacket
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReceiver) GetBufferedPacket(arg1 []byte, arg2 uint16, arg3 uint16) (rtp.Packet, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getBufferedPacketMutex.Lock()
	ret, specificReturn := fake.getBufferedPacketReturnsOnCall[len(fake.getBufferedPacketArgsForCall)]
	fake.getBufferedPacketArgsForCall = append(fake.getBufferedPacketArgsForCall, struct {
		arg1 []byte
		arg2 uint16
		arg3 uint16
	}{arg1Copy, arg2, arg3})
	stub := fake.GetBufferedPacketStub
	fakeReturns := fake.getBufferedPacketReturns
	fake.recordInvocation("GetBufferedPacket", []interface{}{arg1Copy, arg2, arg3})
	fake.getBufferedPacketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReceiver) GetBufferedPacketCallCount() int {
	fake.getBufferedPacketMutex.RLock()
	defer fake.getBufferedPacketMutex.RUnlock()
	return len(fake.getBufferedPacketArgsForCall)
}

func (fake *FakeReceiver) GetBufferedPacketCalls(stub func([]byte, uint16, uint16) (rtp.Packet, error)) {
	fake.getBufferedPacketMutex.Lock()
	defer fake.getBufferedPacketMutex.Unlock()
	fake.GetBufferedPacketStub = stub
}

func (fake *FakeReceiver) GetBufferedPacketArgsForCall(i int) ([]byte, uint16, uint16) {
	fake.getBufferedPacketMutex.RLock()
	defer fake.getBufferedPacketMutex.RUnlock()
	argsForCall := fake.getBufferedPacketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReceiver) GetBufferedPacketReturns(result1 rtp.Packet, result2 error) {
	fake.getBufferedPacketMutex.Lock()
	defer fake.getBufferedPacketMutex.Unlock()
	fake.GetBufferedPacketStub = nil
	fake.getBufferedPacketReturns = struct {
		result1 rtp.Packet
		result2 error
	}{result1, result2}
}

func (fake *FakeReceiver) GetBufferedPacketReturnsOnCall(i int, result1 rtp.Packet, result2 error) {
	fake.getBufferedPacketMutex.Lock()
	defer fake.getBufferedPacketMutex.Unlock()
	fake.GetBufferedPacketStub = nil
	if fake.getBufferedPacketReturnsOnCall == nil {
		fake.getBufferedPacketReturnsOnCall = make(map[int]struct {
			result1 rtp.Packet
			result2 error
		})
	}
	fake.getBufferedPacketReturnsOnCall[i] = struct {
		result1 rtp.Packet
		result2 error
	}{result1, result2}
}

func (fake *FakeReceiver) RTPChan() <-chan buffer.ExtPacket {
	fake.rTPChanMutex.Lock()
	ret, specificReturn := fake.rTPChanReturnsOnCall[len(fake.rTPChanArgsForCall)]
	fake.rTPChanArgsForCall = append(fake.rTPChanArgsForCall, struct {
	}{})
	stub := fake.RTPChanStub
	fakeReturns := fake.rTPChanReturns
	fake.recordInvocation("RTPChan", []interface{}{})
	fake.rTPChanMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReceiver) RTPChanCallCount() int {
	fake.rTPChanMutex.RLock()
	defer fake.rTPChanMutex.RUnlock()
	return len(fake.rTPChanArgsForCall)
}

func (fake *FakeReceiver) RTPChanCalls(stub func() <-chan buffer.ExtPacket) {
	fake.rTPChanMutex.Lock()
	defer fake.rTPChanMutex.Unlock()
	fake.RTPChanStub = stub
}

func (fake *FakeReceiver) RTPChanReturns(result1 <-chan buffer.ExtPacket) {
	fake.rTPChanMutex.Lock()
	defer fake.rTPChanMutex.Unlock()
	fake.RTPChanStub = nil
	fake.rTPChanReturns = struct {
		result1 <-chan buffer.ExtPacket
	}{result1}
}

func (fake *FakeReceiver) RTPChanReturnsOnCall(i int, result1 <-chan buffer.ExtPacket) {
	fake.rTPChanMutex.Lock()
	defer fake.rTPChanMutex.Unlock()
	fake.RTPChanStub = nil
	if fake.rTPChanReturnsOnCall == nil {
		fake.rTPChanReturnsOnCall = make(map[int]struct {
			result1 <-chan buffer.ExtPacket
		})
	}
	fake.rTPChanReturnsOnCall[i] = struct {
		result1 <-chan buffer.ExtPacket
	}{result1}
}

func (fake *FakeReceiver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBufferedPacketMutex.RLock()
	defer fake.getBufferedPacketMutex.RUnlock()
	fake.rTPChanMutex.RLock()
	defer fake.rTPChanMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReceiver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.Receiver = new(FakeReceiver)
