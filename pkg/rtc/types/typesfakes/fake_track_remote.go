// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/livekit/livekit-server/pkg/rtc/types"
	webrtc "github.com/pion/webrtc/v3"
)

type FakeTrackRemote struct {
	CodecStub        func() webrtc.RTPCodecParameters
	codecMutex       sync.RWMutex
	codecArgsForCall []struct {
	}
	codecReturns struct {
		result1 webrtc.RTPCodecParameters
	}
	codecReturnsOnCall map[int]struct {
		result1 webrtc.RTPCodecParameters
	}
	KindStub        func() webrtc.RTPCodecType
	kindMutex       sync.RWMutex
	kindArgsForCall []struct {
	}
	kindReturns struct {
		result1 webrtc.RTPCodecType
	}
	kindReturnsOnCall map[int]struct {
		result1 webrtc.RTPCodecType
	}
	SSRCStub        func() webrtc.SSRC
	sSRCMutex       sync.RWMutex
	sSRCArgsForCall []struct {
	}
	sSRCReturns struct {
		result1 webrtc.SSRC
	}
	sSRCReturnsOnCall map[int]struct {
		result1 webrtc.SSRC
	}
	StreamIDStub        func() string
	streamIDMutex       sync.RWMutex
	streamIDArgsForCall []struct {
	}
	streamIDReturns struct {
		result1 string
	}
	streamIDReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTrackRemote) Codec() webrtc.RTPCodecParameters {
	fake.codecMutex.Lock()
	ret, specificReturn := fake.codecReturnsOnCall[len(fake.codecArgsForCall)]
	fake.codecArgsForCall = append(fake.codecArgsForCall, struct {
	}{})
	stub := fake.CodecStub
	fakeReturns := fake.codecReturns
	fake.recordInvocation("Codec", []interface{}{})
	fake.codecMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTrackRemote) CodecCallCount() int {
	fake.codecMutex.RLock()
	defer fake.codecMutex.RUnlock()
	return len(fake.codecArgsForCall)
}

func (fake *FakeTrackRemote) CodecCalls(stub func() webrtc.RTPCodecParameters) {
	fake.codecMutex.Lock()
	defer fake.codecMutex.Unlock()
	fake.CodecStub = stub
}

func (fake *FakeTrackRemote) CodecReturns(result1 webrtc.RTPCodecParameters) {
	fake.codecMutex.Lock()
	defer fake.codecMutex.Unlock()
	fake.CodecStub = nil
	fake.codecReturns = struct {
		result1 webrtc.RTPCodecParameters
	}{result1}
}

func (fake *FakeTrackRemote) CodecReturnsOnCall(i int, result1 webrtc.RTPCodecParameters) {
	fake.codecMutex.Lock()
	defer fake.codecMutex.Unlock()
	fake.CodecStub = nil
	if fake.codecReturnsOnCall == nil {
		fake.codecReturnsOnCall = make(map[int]struct {
			result1 webrtc.RTPCodecParameters
		})
	}
	fake.codecReturnsOnCall[i] = struct {
		result1 webrtc.RTPCodecParameters
	}{result1}
}

func (fake *FakeTrackRemote) Kind() webrtc.RTPCodecType {
	fake.kindMutex.Lock()
	ret, specificReturn := fake.kindReturnsOnCall[len(fake.kindArgsForCall)]
	fake.kindArgsForCall = append(fake.kindArgsForCall, struct {
	}{})
	stub := fake.KindStub
	fakeReturns := fake.kindReturns
	fake.recordInvocation("Kind", []interface{}{})
	fake.kindMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTrackRemote) KindCallCount() int {
	fake.kindMutex.RLock()
	defer fake.kindMutex.RUnlock()
	return len(fake.kindArgsForCall)
}

func (fake *FakeTrackRemote) KindCalls(stub func() webrtc.RTPCodecType) {
	fake.kindMutex.Lock()
	defer fake.kindMutex.Unlock()
	fake.KindStub = stub
}

func (fake *FakeTrackRemote) KindReturns(result1 webrtc.RTPCodecType) {
	fake.kindMutex.Lock()
	defer fake.kindMutex.Unlock()
	fake.KindStub = nil
	fake.kindReturns = struct {
		result1 webrtc.RTPCodecType
	}{result1}
}

func (fake *FakeTrackRemote) KindReturnsOnCall(i int, result1 webrtc.RTPCodecType) {
	fake.kindMutex.Lock()
	defer fake.kindMutex.Unlock()
	fake.KindStub = nil
	if fake.kindReturnsOnCall == nil {
		fake.kindReturnsOnCall = make(map[int]struct {
			result1 webrtc.RTPCodecType
		})
	}
	fake.kindReturnsOnCall[i] = struct {
		result1 webrtc.RTPCodecType
	}{result1}
}

func (fake *FakeTrackRemote) SSRC() webrtc.SSRC {
	fake.sSRCMutex.Lock()
	ret, specificReturn := fake.sSRCReturnsOnCall[len(fake.sSRCArgsForCall)]
	fake.sSRCArgsForCall = append(fake.sSRCArgsForCall, struct {
	}{})
	stub := fake.SSRCStub
	fakeReturns := fake.sSRCReturns
	fake.recordInvocation("SSRC", []interface{}{})
	fake.sSRCMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTrackRemote) SSRCCallCount() int {
	fake.sSRCMutex.RLock()
	defer fake.sSRCMutex.RUnlock()
	return len(fake.sSRCArgsForCall)
}

func (fake *FakeTrackRemote) SSRCCalls(stub func() webrtc.SSRC) {
	fake.sSRCMutex.Lock()
	defer fake.sSRCMutex.Unlock()
	fake.SSRCStub = stub
}

func (fake *FakeTrackRemote) SSRCReturns(result1 webrtc.SSRC) {
	fake.sSRCMutex.Lock()
	defer fake.sSRCMutex.Unlock()
	fake.SSRCStub = nil
	fake.sSRCReturns = struct {
		result1 webrtc.SSRC
	}{result1}
}

func (fake *FakeTrackRemote) SSRCReturnsOnCall(i int, result1 webrtc.SSRC) {
	fake.sSRCMutex.Lock()
	defer fake.sSRCMutex.Unlock()
	fake.SSRCStub = nil
	if fake.sSRCReturnsOnCall == nil {
		fake.sSRCReturnsOnCall = make(map[int]struct {
			result1 webrtc.SSRC
		})
	}
	fake.sSRCReturnsOnCall[i] = struct {
		result1 webrtc.SSRC
	}{result1}
}

func (fake *FakeTrackRemote) StreamID() string {
	fake.streamIDMutex.Lock()
	ret, specificReturn := fake.streamIDReturnsOnCall[len(fake.streamIDArgsForCall)]
	fake.streamIDArgsForCall = append(fake.streamIDArgsForCall, struct {
	}{})
	stub := fake.StreamIDStub
	fakeReturns := fake.streamIDReturns
	fake.recordInvocation("StreamID", []interface{}{})
	fake.streamIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTrackRemote) StreamIDCallCount() int {
	fake.streamIDMutex.RLock()
	defer fake.streamIDMutex.RUnlock()
	return len(fake.streamIDArgsForCall)
}

func (fake *FakeTrackRemote) StreamIDCalls(stub func() string) {
	fake.streamIDMutex.Lock()
	defer fake.streamIDMutex.Unlock()
	fake.StreamIDStub = stub
}

func (fake *FakeTrackRemote) StreamIDReturns(result1 string) {
	fake.streamIDMutex.Lock()
	defer fake.streamIDMutex.Unlock()
	fake.StreamIDStub = nil
	fake.streamIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTrackRemote) StreamIDReturnsOnCall(i int, result1 string) {
	fake.streamIDMutex.Lock()
	defer fake.streamIDMutex.Unlock()
	fake.StreamIDStub = nil
	if fake.streamIDReturnsOnCall == nil {
		fake.streamIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.streamIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTrackRemote) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.codecMutex.RLock()
	defer fake.codecMutex.RUnlock()
	fake.kindMutex.RLock()
	defer fake.kindMutex.RUnlock()
	fake.sSRCMutex.RLock()
	defer fake.sSRCMutex.RUnlock()
	fake.streamIDMutex.RLock()
	defer fake.streamIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTrackRemote) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.TrackRemote = new(FakeTrackRemote)
