// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"
	"time"

	"github.com/livekit/livekit-server/pkg/rtc/types"
	"github.com/livekit/livekit-server/pkg/sfu"
	"github.com/pion/rtp"
)

type FakeForwarder struct {
	CloseStub        func()
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	CreatedAtStub        func() time.Time
	createdAtMutex       sync.RWMutex
	createdAtArgsForCall []struct {
	}
	createdAtReturns struct {
		result1 time.Time
	}
	createdAtReturnsOnCall map[int]struct {
		result1 time.Time
	}
	OnCloseStub        func(func(types.Forwarder))
	onCloseMutex       sync.RWMutex
	onCloseArgsForCall []struct {
		arg1 func(types.Forwarder)
	}
	StartStub        func()
	startMutex       sync.RWMutex
	startArgsForCall []struct {
	}
	TrackStub        func() *sfu.DownTrack
	trackMutex       sync.RWMutex
	trackArgsForCall []struct {
	}
	trackReturns struct {
		result1 *sfu.DownTrack
	}
	trackReturnsOnCall map[int]struct {
		result1 *sfu.DownTrack
	}
	WriteRTPStub        func(*rtp.Packet) error
	writeRTPMutex       sync.RWMutex
	writeRTPArgsForCall []struct {
		arg1 *rtp.Packet
	}
	writeRTPReturns struct {
		result1 error
	}
	writeRTPReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeForwarder) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeForwarder) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeForwarder) CloseCalls(stub func()) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeForwarder) CreatedAt() time.Time {
	fake.createdAtMutex.Lock()
	ret, specificReturn := fake.createdAtReturnsOnCall[len(fake.createdAtArgsForCall)]
	fake.createdAtArgsForCall = append(fake.createdAtArgsForCall, struct {
	}{})
	stub := fake.CreatedAtStub
	fakeReturns := fake.createdAtReturns
	fake.recordInvocation("CreatedAt", []interface{}{})
	fake.createdAtMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeForwarder) CreatedAtCallCount() int {
	fake.createdAtMutex.RLock()
	defer fake.createdAtMutex.RUnlock()
	return len(fake.createdAtArgsForCall)
}

func (fake *FakeForwarder) CreatedAtCalls(stub func() time.Time) {
	fake.createdAtMutex.Lock()
	defer fake.createdAtMutex.Unlock()
	fake.CreatedAtStub = stub
}

func (fake *FakeForwarder) CreatedAtReturns(result1 time.Time) {
	fake.createdAtMutex.Lock()
	defer fake.createdAtMutex.Unlock()
	fake.CreatedAtStub = nil
	fake.createdAtReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeForwarder) CreatedAtReturnsOnCall(i int, result1 time.Time) {
	fake.createdAtMutex.Lock()
	defer fake.createdAtMutex.Unlock()
	fake.CreatedAtStub = nil
	if fake.createdAtReturnsOnCall == nil {
		fake.createdAtReturnsOnCall = make(map[int]struct {
			result1 time.Time
		})
	}
	fake.createdAtReturnsOnCall[i] = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeForwarder) OnClose(arg1 func(types.Forwarder)) {
	fake.onCloseMutex.Lock()
	fake.onCloseArgsForCall = append(fake.onCloseArgsForCall, struct {
		arg1 func(types.Forwarder)
	}{arg1})
	stub := fake.OnCloseStub
	fake.recordInvocation("OnClose", []interface{}{arg1})
	fake.onCloseMutex.Unlock()
	if stub != nil {
		fake.OnCloseStub(arg1)
	}
}

func (fake *FakeForwarder) OnCloseCallCount() int {
	fake.onCloseMutex.RLock()
	defer fake.onCloseMutex.RUnlock()
	return len(fake.onCloseArgsForCall)
}

func (fake *FakeForwarder) OnCloseCalls(stub func(func(types.Forwarder))) {
	fake.onCloseMutex.Lock()
	defer fake.onCloseMutex.Unlock()
	fake.OnCloseStub = stub
}

func (fake *FakeForwarder) OnCloseArgsForCall(i int) func(types.Forwarder) {
	fake.onCloseMutex.RLock()
	defer fake.onCloseMutex.RUnlock()
	argsForCall := fake.onCloseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeForwarder) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
	}{})
	stub := fake.StartStub
	fake.recordInvocation("Start", []interface{}{})
	fake.startMutex.Unlock()
	if stub != nil {
		fake.StartStub()
	}
}

func (fake *FakeForwarder) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeForwarder) StartCalls(stub func()) {
	fake.startMutex.Lock()
	defer fake.startMutex.Unlock()
	fake.StartStub = stub
}

func (fake *FakeForwarder) Track() *sfu.DownTrack {
	fake.trackMutex.Lock()
	ret, specificReturn := fake.trackReturnsOnCall[len(fake.trackArgsForCall)]
	fake.trackArgsForCall = append(fake.trackArgsForCall, struct {
	}{})
	stub := fake.TrackStub
	fakeReturns := fake.trackReturns
	fake.recordInvocation("Track", []interface{}{})
	fake.trackMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeForwarder) TrackCallCount() int {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	return len(fake.trackArgsForCall)
}

func (fake *FakeForwarder) TrackCalls(stub func() *sfu.DownTrack) {
	fake.trackMutex.Lock()
	defer fake.trackMutex.Unlock()
	fake.TrackStub = stub
}

func (fake *FakeForwarder) TrackReturns(result1 *sfu.DownTrack) {
	fake.trackMutex.Lock()
	defer fake.trackMutex.Unlock()
	fake.TrackStub = nil
	fake.trackReturns = struct {
		result1 *sfu.DownTrack
	}{result1}
}

func (fake *FakeForwarder) TrackReturnsOnCall(i int, result1 *sfu.DownTrack) {
	fake.trackMutex.Lock()
	defer fake.trackMutex.Unlock()
	fake.TrackStub = nil
	if fake.trackReturnsOnCall == nil {
		fake.trackReturnsOnCall = make(map[int]struct {
			result1 *sfu.DownTrack
		})
	}
	fake.trackReturnsOnCall[i] = struct {
		result1 *sfu.DownTrack
	}{result1}
}

func (fake *FakeForwarder) WriteRTP(arg1 *rtp.Packet) error {
	fake.writeRTPMutex.Lock()
	ret, specificReturn := fake.writeRTPReturnsOnCall[len(fake.writeRTPArgsForCall)]
	fake.writeRTPArgsForCall = append(fake.writeRTPArgsForCall, struct {
		arg1 *rtp.Packet
	}{arg1})
	stub := fake.WriteRTPStub
	fakeReturns := fake.writeRTPReturns
	fake.recordInvocation("WriteRTP", []interface{}{arg1})
	fake.writeRTPMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeForwarder) WriteRTPCallCount() int {
	fake.writeRTPMutex.RLock()
	defer fake.writeRTPMutex.RUnlock()
	return len(fake.writeRTPArgsForCall)
}

func (fake *FakeForwarder) WriteRTPCalls(stub func(*rtp.Packet) error) {
	fake.writeRTPMutex.Lock()
	defer fake.writeRTPMutex.Unlock()
	fake.WriteRTPStub = stub
}

func (fake *FakeForwarder) WriteRTPArgsForCall(i int) *rtp.Packet {
	fake.writeRTPMutex.RLock()
	defer fake.writeRTPMutex.RUnlock()
	argsForCall := fake.writeRTPArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeForwarder) WriteRTPReturns(result1 error) {
	fake.writeRTPMutex.Lock()
	defer fake.writeRTPMutex.Unlock()
	fake.WriteRTPStub = nil
	fake.writeRTPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeForwarder) WriteRTPReturnsOnCall(i int, result1 error) {
	fake.writeRTPMutex.Lock()
	defer fake.writeRTPMutex.Unlock()
	fake.WriteRTPStub = nil
	if fake.writeRTPReturnsOnCall == nil {
		fake.writeRTPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeRTPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeForwarder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.createdAtMutex.RLock()
	defer fake.createdAtMutex.RUnlock()
	fake.onCloseMutex.RLock()
	defer fake.onCloseMutex.RUnlock()
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	fake.writeRTPMutex.RLock()
	defer fake.writeRTPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeForwarder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.Forwarder = new(FakeForwarder)
