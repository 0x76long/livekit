// Code generated by counterfeiter. DO NOT EDIT.
package rtcfakes

import (
	"sync"

	"github.com/livekit/livekit-server/pkg/rtc"
	"github.com/livekit/livekit-server/proto/livekit"
)

type FakeSignalConnection struct {
	ReadRequestStub        func() (*livekit.SignalRequest, error)
	readRequestMutex       sync.RWMutex
	readRequestArgsForCall []struct {
	}
	readRequestReturns struct {
		result1 *livekit.SignalRequest
		result2 error
	}
	readRequestReturnsOnCall map[int]struct {
		result1 *livekit.SignalRequest
		result2 error
	}
	WriteResponseStub        func(*livekit.SignalResponse) error
	writeResponseMutex       sync.RWMutex
	writeResponseArgsForCall []struct {
		arg1 *livekit.SignalResponse
	}
	writeResponseReturns struct {
		result1 error
	}
	writeResponseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSignalConnection) ReadRequest() (*livekit.SignalRequest, error) {
	fake.readRequestMutex.Lock()
	ret, specificReturn := fake.readRequestReturnsOnCall[len(fake.readRequestArgsForCall)]
	fake.readRequestArgsForCall = append(fake.readRequestArgsForCall, struct {
	}{})
	stub := fake.ReadRequestStub
	fakeReturns := fake.readRequestReturns
	fake.recordInvocation("ReadRequest", []interface{}{})
	fake.readRequestMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSignalConnection) ReadRequestCallCount() int {
	fake.readRequestMutex.RLock()
	defer fake.readRequestMutex.RUnlock()
	return len(fake.readRequestArgsForCall)
}

func (fake *FakeSignalConnection) ReadRequestCalls(stub func() (*livekit.SignalRequest, error)) {
	fake.readRequestMutex.Lock()
	defer fake.readRequestMutex.Unlock()
	fake.ReadRequestStub = stub
}

func (fake *FakeSignalConnection) ReadRequestReturns(result1 *livekit.SignalRequest, result2 error) {
	fake.readRequestMutex.Lock()
	defer fake.readRequestMutex.Unlock()
	fake.ReadRequestStub = nil
	fake.readRequestReturns = struct {
		result1 *livekit.SignalRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeSignalConnection) ReadRequestReturnsOnCall(i int, result1 *livekit.SignalRequest, result2 error) {
	fake.readRequestMutex.Lock()
	defer fake.readRequestMutex.Unlock()
	fake.ReadRequestStub = nil
	if fake.readRequestReturnsOnCall == nil {
		fake.readRequestReturnsOnCall = make(map[int]struct {
			result1 *livekit.SignalRequest
			result2 error
		})
	}
	fake.readRequestReturnsOnCall[i] = struct {
		result1 *livekit.SignalRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeSignalConnection) WriteResponse(arg1 *livekit.SignalResponse) error {
	fake.writeResponseMutex.Lock()
	ret, specificReturn := fake.writeResponseReturnsOnCall[len(fake.writeResponseArgsForCall)]
	fake.writeResponseArgsForCall = append(fake.writeResponseArgsForCall, struct {
		arg1 *livekit.SignalResponse
	}{arg1})
	stub := fake.WriteResponseStub
	fakeReturns := fake.writeResponseReturns
	fake.recordInvocation("WriteResponse", []interface{}{arg1})
	fake.writeResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSignalConnection) WriteResponseCallCount() int {
	fake.writeResponseMutex.RLock()
	defer fake.writeResponseMutex.RUnlock()
	return len(fake.writeResponseArgsForCall)
}

func (fake *FakeSignalConnection) WriteResponseCalls(stub func(*livekit.SignalResponse) error) {
	fake.writeResponseMutex.Lock()
	defer fake.writeResponseMutex.Unlock()
	fake.WriteResponseStub = stub
}

func (fake *FakeSignalConnection) WriteResponseArgsForCall(i int) *livekit.SignalResponse {
	fake.writeResponseMutex.RLock()
	defer fake.writeResponseMutex.RUnlock()
	argsForCall := fake.writeResponseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSignalConnection) WriteResponseReturns(result1 error) {
	fake.writeResponseMutex.Lock()
	defer fake.writeResponseMutex.Unlock()
	fake.WriteResponseStub = nil
	fake.writeResponseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSignalConnection) WriteResponseReturnsOnCall(i int, result1 error) {
	fake.writeResponseMutex.Lock()
	defer fake.writeResponseMutex.Unlock()
	fake.WriteResponseStub = nil
	if fake.writeResponseReturnsOnCall == nil {
		fake.writeResponseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeResponseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSignalConnection) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readRequestMutex.RLock()
	defer fake.readRequestMutex.RUnlock()
	fake.writeResponseMutex.RLock()
	defer fake.writeResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSignalConnection) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rtc.SignalConnection = new(FakeSignalConnection)
