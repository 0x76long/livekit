// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package livekit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RTCServiceClient is the client API for RTCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RTCServiceClient interface {
	Signal(ctx context.Context, opts ...grpc.CallOption) (RTCService_SignalClient, error)
}

type rTCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRTCServiceClient(cc grpc.ClientConnInterface) RTCServiceClient {
	return &rTCServiceClient{cc}
}

func (c *rTCServiceClient) Signal(ctx context.Context, opts ...grpc.CallOption) (RTCService_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RTCService_serviceDesc.Streams[0], "/livekit.RTCService/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &rTCServiceSignalClient{stream}
	return x, nil
}

type RTCService_SignalClient interface {
	Send(*SignalRequest) error
	Recv() (*SignalResponse, error)
	grpc.ClientStream
}

type rTCServiceSignalClient struct {
	grpc.ClientStream
}

func (x *rTCServiceSignalClient) Send(m *SignalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rTCServiceSignalClient) Recv() (*SignalResponse, error) {
	m := new(SignalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RTCServiceServer is the server API for RTCService service.
// All implementations must embed UnimplementedRTCServiceServer
// for forward compatibility
type RTCServiceServer interface {
	Signal(RTCService_SignalServer) error
	mustEmbedUnimplementedRTCServiceServer()
}

// UnimplementedRTCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRTCServiceServer struct {
}

func (UnimplementedRTCServiceServer) Signal(RTCService_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (UnimplementedRTCServiceServer) mustEmbedUnimplementedRTCServiceServer() {}

// UnsafeRTCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RTCServiceServer will
// result in compilation errors.
type UnsafeRTCServiceServer interface {
	mustEmbedUnimplementedRTCServiceServer()
}

func RegisterRTCServiceServer(s *grpc.Server, srv RTCServiceServer) {
	s.RegisterService(&_RTCService_serviceDesc, srv)
}

func _RTCService_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RTCServiceServer).Signal(&rTCServiceSignalServer{stream})
}

type RTCService_SignalServer interface {
	Send(*SignalResponse) error
	Recv() (*SignalRequest, error)
	grpc.ServerStream
}

type rTCServiceSignalServer struct {
	grpc.ServerStream
}

func (x *rTCServiceSignalServer) Send(m *SignalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rTCServiceSignalServer) Recv() (*SignalRequest, error) {
	m := new(SignalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RTCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "livekit.RTCService",
	HandlerType: (*RTCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _RTCService_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rtc.proto",
}
